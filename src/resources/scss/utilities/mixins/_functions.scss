@use "sass:math";

/**
 * Removes the unit (e.g. px, em, rem) from a value, returning the number only.
 * @param {Number} $num - Number to strip unit from.
 * @returns {Number} The same number, sans unit.
 */
@function strip-unit($num) {
  @return math.div($num, $num * 0 + 1);
}

/**
 * Convert a pixel value to rem.
 * @param {Number} $px - The pixel value to convert.
 * @param {Number} $base - The base font size to use.
 * @return {Number} - The rem value.
 */
@function rem-calc($values, $base: null) {
  $rem-values: ();
  $count: length($values);

  // If no base is defined, defer to the global font size
  @if $base == null {
    $base: $global-font-size;
  }

  // If the base font size is a %, then multiply it by 16px
  // This is because 100% font size = 16px in most all browsers
  @if unit($base) == '%' {
    // 100 was 100% but removed when adding calc it could create problems.
    $base: calc($base / 100) * 16px;
  }

  // Using rem as base allows correct scaling
  @if unit($base) == 'rem' {
    $base: strip-unit($base) * 16px;
  }

  @if $count == 1 {
    @return -zf-to-rem($values, $base);
  }

  @for $i from 1 through $count {
    $rem-values: append($rem-values, -zf-to-rem(nth($values, $i), $base));
  }

  @return $rem-values;
}

/** Converts a pixel value to matching rem value. *Any* value passed, regardless of unit, is assumed to be a pixel value. By default, the base pixel value used to calculate the rem value is taken from the `$global-font-size` variable.
 * @access private
 * @param {Number} $value - Pixel value to convert.
 * @param {Number} $base [null] - Base for pixel conversion.
 * @returns {Number} A number in rems, calculated based on the given value and the base pixel value. rem values are passed through as is.
 */
@function -zf-to-rem($value, $base: null) {
  // Check if the value is a number
  @if type-of($value) != 'number' {
    @warn inspect($value) + ' was passed to rem-calc(), which is not a number.';
    @return $value;
  }

  // Transform em into rem if someone hands over 'em's
  @if unit($value) == 'em' {
    $value: strip-unit($value) * 1rem;
  }

  // Calculate rem if units for $value is not rem or em
  @if unit($value) != 'rem' {
    $value: calc( strip-unit($value) / strip-unit($base) ) * 1rem;
  }

  // Turn 0rem into 0
  @if $value == 0rem {
    $value: 0;
  }

  @return $value;
}